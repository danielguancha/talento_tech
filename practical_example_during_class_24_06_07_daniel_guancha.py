# -*- coding: utf-8 -*-
"""Practical-example-during-class-24-06-07_daniel_guancha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PB3IUD1hY9IP4r_uf-D_Z0rA_m6aERXs

# Ejemplo práctico durante la clase (9-jul-2024, 18:47)

 Por: Andrés Felipe Escallón Portilla
"""

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create a dataset
# Let´s build the values lists
value_n_list = ['Andrew', 'Phillip', 'John']
print(value_n_list)

value_w_list = [50,         78,      91.5] # [kg]
value_h_list = [1.76,      1.87,     1.69] # [m]
# value_bmi_list will be calculated: bmi = w/(h^2)
#value_bmi_list = [25,25,25] # init values [kg/m2]

# Let´s use a dictionary ({key:value})
# with the format {"str":list}
data_dict = {"name":value_n_list,
             "weight":value_w_list,
             "height":value_h_list} #,
              #"BMI":value_bmi_list}

print(data_dict)

# Turn a dictionary into a dataframe
df = pd.DataFrame(data_dict)

print(df)
# Call a variable
df

df

df

df

# prompt: Con DataFrame df: add another column

df['bmi'] = df['weight'] / (df['height'] ** 2)
df

df.describe()

"""## Making some transformations on the df"""

# z = x / y*y
df["BMI"] =  df["weight"] / df["height"]**2
df

"""De acuerdo a los resultados puede conlcuir que:

-El valor max es:
-
"""

df["BMI"].dtype

# TO-DO: create another column with integers and turn it to float, such as:
df["BMI"] = df["BMI"].astype(float)

df["BMI"].dtype

df["name"].dtype
# Homework: how to verify that a column contains string

df

"""## Init steps towards EDA (Exploratory Data Analisys):
 Homework: perform a full EDA with your own invented dataset with at least 10 rows
"""

# Descriptive stats
df_stats = df.describe()
df_stats

"""### TO-DO: please analyze the results (univariate: describe() / multivariate: correlation matrix)


"""

df["health_condition"] = 'within the normal range' if 18.0<=df['BMI']<=25.0 else 'out of the normal range'
#df

df_stats.corr()

"""# Prompt used in chat GPT (by OpenAI) / Gemini (by Google) / Bing (Copilot by Microsoft) to solve the above error:

You are a python expert, please help with the error I will show later that is appearing when I run this code in Google collab: "df["health_condition"] = 'within the normal range' if 18.0<=df['BMI']<=25.0 else 'out of the normal range'".  

The error is:

---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-16-4e9a74b99b6c> in <cell line: 1>()
----> 1 df["health_condition"] = 'within the normal range' if 18.0<=df['BMI']<=25.0 else 'out of the normal range'
      2 df

/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py in __nonzero__(self)
   1525     @final
   1526     def __nonzero__(self) -> NoReturn:
-> 1527         raise ValueError(
   1528             f"The truth value of a {type(self).__name__} is ambiguous. "
   1529             "Use a.empty, a.bool(), a.item(), a.any() or a.all()."

ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().



"""

df

print(df)

df_stats

print(df_stats)

df["health_condition"] = np.where(  (df['BMI'] >= 18.0) & (df['BMI'] <= 25.0) , 'within the normal range', 'out of the normal range' )
df

# Define a function to determine health condition
def determine_health_condition(bmi):
    if 18.0 <= bmi <= 25.0:
        return 'within the normal range'
    else:
        return 'out of the normal range'

# Apply the function to create the new column
df["health_condition4"] = df["BMI"].apply(determine_health_condition)

print(df)
df

# Define a function to determine health condition
def determine_health_condition7(bmi):
    """
    if 18.0 <= bmi <= 25.0:
        return 'within the normal range'
    else:
        return 'out of the normal range'
    """
    return 'within the normal range' if 18.0 <= bmi <= 25.0 else 'out of the normal range'

# Apply the function to create the new column
df["health_condition6"] = df["BMI"].apply(determine_health_condition7)
df

"""#### Please remove the unnecessary columns and search how to upload/download the df as .csv and .json and .xlsx

# Correlation matrix (9-jul-2024)

ChatGPT prompt used:

"you´re a python expert, please give code to get the correlation matrix of a dataframe with a simple example and calculus explanation"
"""

# Simple example given by chat GPT
import pandas as pd

# Create a sample DataFrame
data = {
    'A': [1, 2, 3, 4],
    'B': [4, 3, 2, 1],
    'C': [2, 4, 6, 8],
}

df = pd.DataFrame(data)

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

"""# A more complete example with synthetic data given by ChatGPT"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate synthetic data
np.random.seed(42)  # for reproducibility

data = {
    'A': np.random.randn(100),
    'B': np.random.randn(100) * 2,
    'C': np.random.randn(100) + 1,
    'D': np.random.randn(100) - 1,
}

df = pd.DataFrame(data)

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

data

df

"""# Consultar cómo es el cálculo de la matriz de correlación (PEND):

Chat GPT Prompt: "Please, give me the explanation mathematically about the way the correlation matrix computation is performed"

Resultado:

Incluir formulas como si estuvieran escritas en un tablero

```
# E`sto tiene formato de código`
```

# Tarea: consultar qué es y cómo funciona la matriz de confusión (clasificación)

# Consultar las métricas de desempeño para regresión y clasificación
"""

# TO-DO

"""Las metricas..."""